/*
 * Copyright 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include <err.h>

extern "C" {
#include <trusty_std.h>
#include <openssl/bn.h>
#include <openssl/rsa.h>
#include <openssl/pem.h>
}

#include "rsa_demo.h"
#include "../trusty_tademo.h"

namespace tademo {
static struct rsa_data tests[] = {
	{ /* 2048 bit */
		256,
		/* n */
		{ 0xBB, 0xE6, 0x11, 0x28, 0x13, 0x40, 0xD8, 0x6D, 0xE9, 0x54, 0x78, 0x82, 0x01, 0xA0, 0xDE, 0xCE,
		  0x2D, 0x57, 0x69, 0x8E, 0x8A, 0x93, 0x26, 0x4F, 0x72, 0x3F, 0xEB, 0xEF, 0xE1, 0xE9, 0xF9, 0x2E,
		  0x6F, 0x43, 0x47, 0x0A, 0x4B, 0xA0, 0x83, 0xFC, 0x8C, 0xC4, 0x93, 0xD9, 0xFC, 0x2E, 0xC4, 0xF9,
		  0x7E, 0x67, 0xDC, 0x7C, 0xC6, 0xE5, 0xAE, 0xB4, 0x1A, 0xB3, 0xDB, 0xD1, 0xE3, 0x9A, 0xB3, 0xB3,
		  0xF2, 0xCB, 0x94, 0xBA, 0xCC, 0x30, 0x73, 0x62, 0x46, 0x74, 0x44, 0xC1, 0x6B, 0x6B, 0x86, 0x11,
		  0xB7, 0xD1, 0x7F, 0xA0, 0xD3, 0x53, 0x99, 0x7C, 0x9A, 0x78, 0xA1, 0x04, 0x6C, 0x7D, 0x56, 0x09,
		  0x08, 0x7C, 0x14, 0x61, 0xDC, 0xE5, 0x89, 0xB3, 0x24, 0xB1, 0x73, 0x25, 0x7D, 0xE0, 0x5F, 0x43,
		  0x36, 0x1C, 0x12, 0xDD, 0xB5, 0xE3, 0x8C, 0x6F, 0x53, 0x4F, 0x94, 0xE1, 0xD3, 0xDC, 0x94, 0xBE,
		  0xD8, 0x5D, 0xDD, 0x4A, 0x47, 0x13, 0xF6, 0xEE, 0x5F, 0x7C, 0xA2, 0xE5, 0xBF, 0x92, 0xA6, 0xC9,
		  0x08, 0x11, 0x5A, 0xFD, 0x97, 0x68, 0x60, 0x0A, 0x72, 0xBA, 0xA0, 0x5E, 0x81, 0x27, 0xD5, 0x6C,
		  0x19, 0x5D, 0xBA, 0x0F, 0x04, 0x64, 0x2B, 0x79, 0x51, 0xA1, 0x36, 0x5F, 0x34, 0x43, 0xBF, 0xAB,
		  0x31, 0xDB, 0x57, 0xBB, 0xA6, 0x94, 0x9F, 0x3D, 0xBC, 0xE6, 0x69, 0xBD, 0xBC, 0x5D, 0xC4, 0xC0,
		  0x0D, 0x20, 0xC8, 0xF2, 0x85, 0x67, 0xCE, 0x4F, 0x68, 0xC7, 0x9D, 0x73, 0x95, 0x8B, 0x42, 0x2C,
		  0x0D, 0x12, 0x98, 0xAD, 0x53, 0x5F, 0x21, 0xCD, 0x9C, 0x01, 0x21, 0xDE, 0x7E, 0xB2, 0x32, 0xF1,
		  0xC4, 0x66, 0xF5, 0x3D, 0x53, 0x6C, 0x24, 0xA0, 0x86, 0x9B, 0xD4, 0x61, 0xB5, 0x63, 0xF6, 0x45,
		  0x4E, 0xD4, 0x26, 0x86, 0x0C, 0xC9, 0x43, 0x73, 0x9F, 0x18, 0xED, 0x20, 0xE8, 0xA3, 0xC0, 0xC9, },
		/* e */
		{ 0x00, 0x01, 0x00, 0x01, },
		/* d */
		{ 0xAE, 0x96, 0xFC, 0xB4, 0x0F, 0x07, 0xBE, 0xD2, 0x89, 0xEE, 0xEA, 0x36, 0x6A, 0x8A, 0xEE, 0xDC,
		  0x06, 0xB7, 0x65, 0x26, 0x84, 0x4E, 0x6C, 0x57, 0x7F, 0xA2, 0x33, 0x79, 0x66, 0xA1, 0xFF, 0xDE,
		  0x0C, 0x96, 0x27, 0xC9, 0x42, 0x32, 0x38, 0xD1, 0x8E, 0x7F, 0x0D, 0x9E, 0x8B, 0xBB, 0x6D, 0x5D,
		  0x21, 0xFE, 0x21, 0x9A, 0x73, 0x39, 0x71, 0x96, 0x7A, 0x05, 0x4B, 0x28, 0x80, 0x62, 0xFB, 0xBD,
		  0x25, 0xC9, 0xD2, 0x3D, 0xAB, 0x83, 0x0D, 0x83, 0x70, 0x51, 0x92, 0x9D, 0x62, 0x51, 0xBB, 0x76,
		  0x75, 0x25, 0x9D, 0x80, 0x73, 0x3C, 0x07, 0xAF, 0x06, 0xDD, 0x35, 0x48, 0x26, 0x02, 0x63, 0xD1,
		  0xEA, 0xE7, 0x58, 0x0D, 0x02, 0xB2, 0xE9, 0xBA, 0xE2, 0x4A, 0x5B, 0xE2, 0xA7, 0x4E, 0xB7, 0x55,
		  0x7D, 0x4E, 0xA2, 0x9D, 0x0D, 0xE8, 0x0C, 0x52, 0x58, 0xC7, 0xE6, 0x5F, 0xDB, 0x7A, 0xE7, 0x5D,
		  0xC1, 0x6D, 0x94, 0x2C, 0x4F, 0x03, 0x6D, 0x34, 0x17, 0x6C, 0xD1, 0xD9, 0x17, 0xF9, 0x06, 0x60,
		  0x20, 0xED, 0xF3, 0x1C, 0xD8, 0x5E, 0x01, 0xB8, 0xBA, 0x15, 0xBF, 0x4F, 0x5A, 0xE9, 0xF1, 0xE5,
		  0x4F, 0xD8, 0xE7, 0x51, 0x28, 0x9C, 0x9A, 0x82, 0x83, 0x74, 0xD0, 0x44, 0x52, 0x1B, 0xEB, 0x65,
		  0x05, 0x68, 0x02, 0x1B, 0x01, 0xD9, 0xC8, 0x16, 0x2B, 0x10, 0xEF, 0x5E, 0x01, 0xFE, 0xF5, 0x47,
		  0x5C, 0x8C, 0xC4, 0xCE, 0x43, 0x6A, 0x44, 0xA1, 0x42, 0x9E, 0x28, 0x8A, 0x56, 0x47, 0x20, 0x5C,
		  0x7F, 0x48, 0x7B, 0xB0, 0xC2, 0xF5, 0x48, 0xA4, 0xC9, 0xCB, 0x71, 0x5F, 0x60, 0x48, 0x22, 0xC6,
		  0x56, 0x55, 0xDA, 0x1E, 0x9F, 0x42, 0x11, 0x1A, 0xA1, 0x03, 0xEC, 0x62, 0x69, 0xFF, 0xDE, 0xBB,
		  0xC7, 0x04, 0xF4, 0xAC, 0xAE, 0x61, 0xE1, 0xB5, 0x71, 0x4C, 0x08, 0x72, 0x4C, 0xDA, 0x96, 0x01, },
		/* input data */
		{ 0x44, 0x63, 0xD0, 0x5B, 0xA8, 0xE1, 0x68, 0x18, 0x24, 0x2E, 0x83, 0xBF, 0xAE, 0x99, 0xD7, 0x3F,
		  0x70, 0x03, 0x4F, 0x63, 0x10, 0x8A, 0x37, 0x88, 0x49, 0x4D, 0xF7, 0xDA, 0x08, 0x11, 0x5C, 0x0A,
		  0x14, 0x63, 0x67, 0x4B, 0x15, 0x69, 0x3B, 0x1D, 0x03, 0x9D, 0x9F, 0x49, 0x7C, 0x14, 0x09, 0xCD,
		  0x9E, 0x10, 0x4C, 0x80, 0xC0, 0x92, 0x43, 0x67, 0x4A, 0x61, 0xD2, 0x8F, 0xBE, 0xA2, 0xB4, 0xA9,
		  0x31, 0x2D, 0xE1, 0x3B, 0xA8, 0xA9, 0x5B, 0x6E, 0x40, 0xD8, 0x41, 0x94, 0xA3, 0x48, 0x03, 0x80,
		  0x1F, 0x69, 0x75, 0x10, 0xF3, 0x8D, 0x13, 0xC8, 0x75, 0x72, 0x7C, 0xEA, 0x32, 0xC2, 0x90, 0xEA,
		  0x87, 0x25, 0xC8, 0xF0, 0xE3, 0xF9, 0x32, 0x45, 0x28, 0x01, 0x3B, 0x97, 0x8F, 0xE9, 0x30, 0xDB,
		  0x89, 0x4B, 0x57, 0x3D, 0x00, 0x8D, 0x0A, 0xB6, 0x65, 0xD2, 0xF2, 0x30, 0x80, 0x12, 0x1E, 0xE5,
		  0xBA, 0xE7, 0x50, 0x63, 0xEA, 0xC3, 0xCF, 0x83, 0xA9, 0x39, 0xF4, 0x93, 0x14, 0x9C, 0xA0, 0xBD,
		  0x22, 0xC6, 0xBD, 0x22, 0x3D, 0xBA, 0xBC, 0xDF, 0x75, 0xA3, 0x63, 0x18, 0xDD, 0xFB, 0x56, 0x02,
		  0xCF, 0x2A, 0x5C, 0xE5, 0x35, 0x54, 0x4D, 0x34, 0x5E, 0xEC, 0x90, 0xAA, 0x88, 0x95, 0xD9, 0x8A,
		  0xA6, 0x91, 0x17, 0x33, 0xEB, 0xA4, 0xF1, 0xAB, 0xA9, 0x15, 0xC4, 0x36, 0x16, 0xBC, 0xBD, 0x5F,
		  0xE1, 0x54, 0xD8, 0x68, 0x83, 0xFE, 0x44, 0x19, 0x62, 0x29, 0xF4, 0x81, 0xA2, 0x04, 0xE0, 0xE5,
		  0x86, 0x4B, 0x78, 0x66, 0x91, 0x19, 0x65, 0xE7, 0x5B, 0x0F, 0xA5, 0x73, 0xB3, 0xFD, 0x76, 0x59,
		  0xEC, 0x62, 0x9C, 0xA2, 0xBC, 0xB6, 0x0D, 0x00, 0x24, 0xC0, 0xD8, 0x57, 0x91, 0x4E, 0x54, 0x8D,
		  0xAD, 0x22, 0x65, 0x30, 0xD3, 0x6D, 0xEF, 0x98, 0x77, 0x80, 0xDF, 0xBD, 0x6F, 0x09, 0x73, 0xAB, },
		/* output data */
		{ 0xAE, 0x96, 0xFC, 0xB4, 0x0F, 0x07, 0xBE, 0xD2, 0x89, 0xEE, 0xEA, 0x36, 0x6A, 0x8A, 0xEE, 0xDC,
		  0x06, 0xB7, 0x65, 0x26, 0x84, 0x4E, 0x6C, 0x57, 0x7F, 0xA2, 0x33, 0x79, 0x66, 0xA1, 0xFF, 0xDE,
		  0x0C, 0x96, 0x27, 0xC9, 0x42, 0x32, 0x38, 0xD1, 0x8E, 0x7F, 0x0D, 0x9E, 0x8B, 0xBB, 0x6D, 0x5D,
		  0x21, 0xFE, 0x21, 0x9A, 0x73, 0x39, 0x71, 0x96, 0x7A, 0x05, 0x4B, 0x28, 0x80, 0x62, 0xFB, 0xBD,
		  0x25, 0xC9, 0xD2, 0x3D, 0xAB, 0x83, 0x0D, 0x83, 0x70, 0x51, 0x92, 0x9D, 0x62, 0x51, 0xBB, 0x76,
		  0x75, 0x25, 0x9D, 0x80, 0x73, 0x3C, 0x07, 0xAF, 0x06, 0xDD, 0x35, 0x48, 0x26, 0x02, 0x63, 0xD1,
		  0xEA, 0xE7, 0x58, 0x0D, 0x02, 0xB2, 0xE9, 0xBA, 0xE2, 0x4A, 0x5B, 0xE2, 0xA7, 0x4E, 0xB7, 0x55,
		  0x7D, 0x4E, 0xA2, 0x9D, 0x0D, 0xE8, 0x0C, 0x52, 0x58, 0xC7, 0xE6, 0x5F, 0xDB, 0x7A, 0xE7, 0x5D,
		  0xC1, 0x6D, 0x94, 0x2C, 0x4F, 0x03, 0x6D, 0x34, 0x17, 0x6C, 0xD1, 0xD9, 0x17, 0xF9, 0x06, 0x60,
		  0x20, 0xED, 0xF3, 0x1C, 0xD8, 0x5E, 0x01, 0xB8, 0xBA, 0x15, 0xBF, 0x4F, 0x5A, 0xE9, 0xF1, 0xE5,
		  0x4F, 0xD8, 0xE7, 0x51, 0x28, 0x9C, 0x9A, 0x82, 0x83, 0x74, 0xD0, 0x44, 0x52, 0x1B, 0xEB, 0x65,
		  0x05, 0x68, 0x02, 0x1B, 0x01, 0xD9, 0xC8, 0x16, 0x2B, 0x10, 0xEF, 0x5E, 0x01, 0xFE, 0xF5, 0x47,
		  0x5C, 0x8C, 0xC4, 0xCE, 0x43, 0x6A, 0x44, 0xA1, 0x42, 0x9E, 0x28, 0x8A, 0x56, 0x47, 0x20, 0x5C,
		  0x7F, 0x48, 0x7B, 0xB0, 0xC2, 0xF5, 0x48, 0xA4, 0xC9, 0xCB, 0x71, 0x5F, 0x60, 0x48, 0x22, 0xC6,
		  0x56, 0x55, 0xDA, 0x1E, 0x9F, 0x42, 0x11, 0x1A, 0xA1, 0x03, 0xEC, 0x62, 0x69, 0xFF, 0xDE, 0xBB,
		  0xC7, 0x04, 0xF4, 0xAC, 0xAE, 0x61, 0xE1, 0xB5, 0x71, 0x4C, 0x08, 0x72, 0x4C, 0xDA, 0x96, 0x01, },
	},
};

static void demo_hexdump(const char *title, uint8_t * data, int len)
{
	int i, j;
	int N = len / 16 + 1;
	TLOGE("%s\n", title);
	TLOGE("demo_hexdump:%d bytes\n", len);
	for (i = 0; i < N; i++) {
		TLOGE("\n");
		for (j = 0; j < 16; j++) {
			if (i * 16 + j >= len)
				goto end;
			TLOGE("%02x\n", data[i * 16 + j]);
		}
	}
end:
	TLOGE("\n");
}

static int set_bignum(BIGNUM **out, const uint8_t *in, size_t len) {
	*out = BN_bin2bn(in, len, NULL);
	return *out != NULL;
}


int Rsa_Demo::rsa_test_enc (void) {
	int err;
	int32_t i = 0;
	uint8_t out_temp[512];

	TLOGE ("rsa new test\n");
	RSA *rsa = RSA_new();
	if (rsa == NULL) {
		TLOGE ("rsa new failed!");
		return (-1);
	}

	set_bignum(&rsa->n, tests[i].key_n, tests[i].data_len);
	set_bignum(&rsa->e, tests[i].key_e, 4);
	set_bignum(&rsa->d, tests[i].key_d, tests[i].data_len);
	err = RSA_public_encrypt(tests[i].data_len, tests[i].din, out_temp, rsa, RSA_NO_PADDING);
	if (err < 0 || memcmp(out_temp, tests[i].dout, tests[i].data_len) != 0) {
		demo_hexdump("rsa hexdump", out_temp, tests[i].data_len);
		TLOGE("test err = [%d]\n", err);
		RSA_free(rsa);
		return (-1);
	}
	TLOGE("rsa enc test success!\n");

	RSA_free(rsa);
	return 0;
}

int Rsa_Demo::rsa_test_dec (void) {
	int err;
	int32_t i = 0;
	uint8_t out_temp[512];

	TLOGE ("rsa new test\n");
	RSA *rsa = RSA_new();
	if (rsa == NULL) {
		TLOGE ("rsa new failed!");
		return (-1);
	}

	set_bignum(&rsa->n, tests[i].key_n, tests[i].data_len);
	set_bignum(&rsa->e, tests[i].key_e, 4);
	set_bignum(&rsa->d, tests[i].key_d, tests[i].data_len);
	err = RSA_private_decrypt(tests[i].data_len, tests[i].dout, out_temp, rsa, RSA_NO_PADDING);
	if (err < 0 || memcmp(out_temp, tests[i].din, tests[i].data_len) != 0) {
		demo_hexdump("rsa hexdump", out_temp, tests[i].data_len);
		TLOGE("test err = [%d]\n", err);
		RSA_free(rsa);
		return (-1);
	}
	TLOGE("rsa dec test success!\n");

	RSA_free(rsa);
	return 0;
}
}
